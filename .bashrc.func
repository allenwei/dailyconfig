###########################################################################
###
###            Function defines
###
###########################################################################
# {{{
# function will stay in the memory after bash start and you can call it like a command. Function 
# is more efficient then normal command

# PAY MORE ATTENTION TO THE FOLLOWING ASPECT WHEN WRITE A FUNCTION:
# 1. there must be some blank around the '=' '>' '<' etc
# 2. 

# Some example functions
 function sayhello() 
 {
	 # print a complement with colors
	 echo  "[36;40;1;5m Hello, $@! [m"; 
 }

# list history commands
 function hl()
 {
	if [ "$1" = "--help" ] || [ "$1" = "-h" ]
	 then
		echo "Usage: "
        echo "        list command history using fc builtin command"
		echo "        hl  [FIRST] [LAST] "
	else
		fc -l $@
	fi
 }

 # cd and ls 
 function cl()
 {
	cd $1
    ls	
 }

 function c()
 {
     if [ -e "$1" ]; then
         cd $1
     else
         DEST_DIR = $PWD
     fi

 }

 function smc() # Show Me Color!
 {
     local -a COLOR_ARRAY
     COLOR_ARRAY=('[31;40m'
        '[32;40m'
        '[33;40m'
        '[34;40m'
        '[35;40m'
        '[36;40m'
        '[31;47m'
        '[32;47m'
        '[33;47m'
        '[34;47m'
        '[35;47m'
        '[36;47m'
     )
     SED_SUBSTITUTE_OPT='g'
	 while getopts ":i" opt; do
		 case $opt in 
			 i  ) SED_SUBSTITUTE_OPT=${SED_SUBSTITUTE_OPT}i;;
			 \? ) echo "$0 : Colorize specified word of output."
			      echo "     Usage: $0 [-i] [-I] keywords..."
				  echo "      -i: ignore case               "
				  echo "      -I: case sensitive            "
			 exit 0
		 esac
		 shift
	 done

     for i in $(seq $#); do 
         COLOR_ARRAY_INDEX=$(((i-1)%${#COLOR_ARRAY}))
         SED_SCRIPT=$SED_SCRIPT"s/\($1\)/${COLOR_ARRAY[$COLOR_ARRAY_INDEX]}\1[m/$SED_SUBSTITUTE_OPT
         "
         shift
     done
     echo ${SED_SCRIPT:?'You must give me at least one keyword to highlight'} > /dev/null
     sed -u -e "$SED_SCRIPT"
 }

 function forport()
 {
	 if [ -n "$1" ]; then
		ssh -R 3000:localhost:22 -l wangwei $1
	 else
		echo ' You must input the destination IP. '
	 fi
 }

# use the following command to start/stop PPPOE 
# rasdial.exe entryname [username [password|*]] [/DOMAIN:domain]
#   [/PHONE:phonenumber] [/CALLBACK:callbacknumber]
#   [/PHONEBOOK:phonebookfile] [/PREFIXSUFFIX]
# rasdial.exe [entryname] /DISCONNECT
 function pppoe()
 {
	 if [ -n "$1" ]; then
		 if [ "$1" = "on" ]; then
			if [ -n "$PPPOEPASSWD" ]; then
				PASSWD=$PPPOEPASSWD
			else
				read -s PASSWD 
				export PPPOEPASSWD=$PASSWD
			fi
			rasdial.exe adsl 100001267980 $PASSWD
		 elif [ "$1" = "off" ]; then
			rasdial.exe /DISCONNECT
		 else
			 cat <<__END
Usage: 
	pppoe [on]/[off]
__END
		fi
	 else
		 cat <<__END
Usage: 
	pppoe [on]/[off]
__END
	 fi
 }
 function desktop()
 {
	 cd /cygdrive/c/Documents\ and\ Settings/$USER/
 }

 function pgrep2()
 {
     local KEYWORD
     KEYWORD={1:?'You must specify a keyword to search'}
	 ps aux | egrep "^[U]SER|[${KEYWORD:0:1}]${KEYWORD:1:}"
 }

 function netlist()
 {
     if [ ! `uname -s` = 'Cygwin' ];then
        sudo netstat -nlptu | /usr/bin/perl -ape 'if(@F[-1] =~ m#^(\d+)/.+$#){ open CMDLINE, "/proc/$1/cmdline" ; $cmdline = <CMDLINE>; $last_field = $1."#".$cmdline; s#\d+/.+$#$last_field# }'
     fi
 }

 # use vim to handle files in batch mode just like sed
 function vsed()
 {
    if [ $# != 2 ]; then
        echo 'Help:                                 '
        echo '   vsed VIM_CMD FILE                  '
        echo ' To operate multiple files at the same time, use for loop: '
        echo '    for i in *; do vsed '+%s/foo/bar/g' $i; done            '
        exit 1
    fi
    VIMCMD=$1
    FILE=$2
    vim -u NONE -i NONE -Nnes "+se ul=-1" $VIMCMD "+update|q"  $FILE
 }

 function ding()
 {
     # to use gnome-osd-client, you need to install package gnome-osd 
     # view manpage for gnome-osd-client for the format of notification message
     # gnome-osd provide a python binding also, not have a look yet.
     if [ -n "$(which gnome-osd-client)" ]; then
         gnome-osd-client -f "<message id='ding' osd_fake_translucent_bg='on' osd_vposition='center' animations='on' hide_timeout='10000' osd_halignment='right'>$*</message>"
     fi
 }

 #growl() { echo -e $'\e]9;'${1}'\007' ; return  ; }
 growl() { netgrowl.py -q -n "ShellNotification" -m "$*"; }

 function v()
 {
    /usr/bin/env vim -u $HOME/.vim_simple_rc -U NONE --noplugin --cmd ":setlocal buftype=nofile" "${@:--}"
 }

 function vv()
 {
     # following command use vim as a terminal command, just like sed, awk etc,
     # it is suitable to use in a script or just command line
     #/usr/bin/env vim -X -E -s -u NONE -c <add some useful command here> -c 'wq' "$@"
     echo "Not Done Yet"
 }
 # }}}

#{{{ wcd settings example for Mac OS X, it can be used on *nix system 
# #  with some minor modification, put these lines to .bashrc.local file
# export WCDEXCLUDE=/dev:/tmp:*CVS:*.svn:.Trash
# function wcd
# {
#    go=$HOME/.wcd/bin/wcd.go
#    test -f $go && rm -f $go
#    /usr/local/bin/wcd -z 30 -G $HOME/.wcd/bin $* && test -f $go && source $go
# }

# -j option make wcd to change to the first option directly,
# if this is not what you want, you can just use '$ !!<CR>'
#  or <C-p><CR> to reexecute the command to go to the next option, it is cyclic
function w
{
   wcd -q +n . -c $* 2>/dev/null
}
make-completion-wrapper _cd _w cd
complete -o nospace -F _w w

function rt()
{
 # shortcut to start rails test
 if [ $* ]; then 
   ruby -Itest $*
   #case $* in 
     #*/unit/*) rake test:units TEST=$* ;;
     #*/functional/*) rake test:functionals TEST=$* ;;
     #*/integration/*) rake test:integration TEST=$* ;;
     #*) echo -n "this test is not supported" ;;
    #esac
 else
   rake 
 fi
}

function cur_ip()
{
  curl -s ip.appspot.com
}
